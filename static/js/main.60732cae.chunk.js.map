{"version":3,"sources":["components/Navbar.module.css","components/Header.module.css","components/App.module.css","utils/publicUrl.js","components/Header.js","components/Navbar.js","components/Home.js","components/App.js","serviceWorker.js","index.js"],"names":["module","exports","assetPath","process","Header","props","className","css","header","headerItem","src","publicUrl","alt","Navbar","navbar","navItem","Home","App","container","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"wHACAA,EAAOC,QAAU,CAAC,OAAS,yB,gBCA3BD,EAAOC,QAAU,CAAC,OAAS,yB,kBCA3BD,EAAOC,QAAU,CAAC,IAAM,iBAAiB,WAAW,sBAAsB,gBAAgB,2BAA2B,aAAa,wBAAwB,WAAW,wB,uKCDtJ,WAACC,GACZ,MAAOC,GAAuBD,GC2BnBE,MAvBf,SAAgBC,GAEZ,OACI,yBAAKC,UAAWC,IAAIC,QAChB,yBAAKF,UAAWC,IAAIE,YAChB,gCACI,yBAAKC,IAAKC,EAAU,qBAAsBC,IAAI,aAGtD,yBAAKN,UAAWC,IAAIE,YAChB,gCACI,yBAAKC,IAAKC,EAAU,mBAAoBC,IAAI,WAGpD,yBAAKN,UAAWC,IAAIE,YAChB,gCACI,yBAAKC,IAAKC,EAAU,sBAAuBC,IAAI,gB,gBCiBpDC,MAjCf,SAAgBR,GAEZ,OACI,yBAAKC,UAAWC,IAAIO,QAChB,yBAAKR,UAAWC,IAAIQ,SAChB,gCACI,yBAAKL,IAAKC,EAAU,mBAAoBC,IAAI,WAGpD,yBAAKN,UAAWC,IAAIQ,SAChB,gCACI,yBAAKL,IAAKC,EAAU,sBAAuBC,IAAI,cAGvD,yBAAKN,UAAWC,IAAIQ,SAChB,gCACI,yBAAKL,IAAKC,EAAU,sBAAuBC,IAAI,eAGvD,yBAAKN,UAAWC,IAAIQ,SAChB,gCACI,yBAAKL,IAAKC,EAAU,uBAAwBC,IAAI,eAGxD,yBAAKN,UAAWC,IAAIQ,SAChB,gCACI,yBAAKL,IAAKC,EAAU,sBAAuBC,IAAI,gBCrBpDI,MARf,WACE,OACE,sCCgBWC,MAdf,WACE,OACC,yBAAKX,UAAU,OACd,yBAAKA,UAAWC,IAAIW,WAClB,kBAAC,EAAD,MACA,8BACA,kBAAC,EAAD,OAEA,kBAAC,EAAD,SCFcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.60732cae.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"navbar\":\"Navbar_navbar__31-FB\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"Header_header__3mObx\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"App\":\"App_App__2s_Fq\",\"App-logo\":\"App_App-logo__1OUG0\",\"App-logo-spin\":\"App_App-logo-spin__3jj4e\",\"App-header\":\"App_App-header__3TyHG\",\"App-link\":\"App_App-link__1zUGJ\"};","export default (assetPath)=>{\n    return process.env.PUBLIC_URL+assetPath;\n}","import React from 'react';\nimport css from './Header.module.css';\nimport publicUrl from '../utils/publicUrl';\n\n\nfunction Header(props) {\n\n    return (\n        <nav className={css.header}>\n            <div className={css.headerItem}>\n                <button>\n                    <img src={publicUrl('assets/camera.svg')} alt=\"Camera\"/>\n                </button>\n            </div>\n            <div className={css.headerItem}>\n                <button>\n                    <img src={publicUrl('assets/logo.png')} alt=\"Logo\"/>\n                </button>\n            </div>\n            <div className={css.headerItem}>\n                <button>\n                    <img src={publicUrl('assets/message.svg')} alt=\"Message\"/>\n                </button>\n            </div>\n        </nav>\n    );\n}\n\nexport default Header;\n","import React from 'react';\nimport css from './Navbar.module.css';\nimport publicUrl from '../utils/publicUrl';\n\n\nfunction Navbar(props) {\n\n    return (\n        <nav className={css.navbar}>\n            <div className={css.navItem}>\n                <button>\n                    <img src={publicUrl('assets/home.svg')} alt=\"Home\"/>\n                </button>\n            </div>\n            <div className={css.navItem}>\n                <button>\n                    <img src={publicUrl('assets/explore.svg')} alt=\"Explore\"/>\n                </button>\n            </div>\n            <div className={css.navItem}>\n                <button>\n                    <img src={publicUrl('assets/newpost.svg')} alt=\"New Post\"/>\n                </button>\n            </div>\n            <div className={css.navItem}>\n                <button>\n                    <img src={publicUrl('assets/activity.svg')} alt=\"Activity\"/>\n                </button>\n            </div>\n            <div className={css.navItem}>\n                <button>\n                    <img src={publicUrl('assets/profile.svg')} alt=\"Profile\"/>\n                </button>\n            </div>\n        </nav>\n    );\n}\n\nexport default Navbar;\n","import React from 'react';\n\nfunction Home() {\n  return (\n    <div>\n      Home       \n    </div>\n  );\n}\n\nexport default Home;","import React from 'react';\nimport css from './App.module.css';\nimport Header from './Header';\nimport Navbar from './Navbar';\nimport Home from './Home';\n\nfunction App() {\n  return (\n   <div className=\"App\">\n    <div className={css.container}>\n      <Header/>\n      <main>\n      <Home/>\n      </main>\n      <Navbar/>\n    </div>\n  </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}